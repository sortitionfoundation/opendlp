"""Add tz aware datetimes, create indexes in table definitions

Revision ID: 3b1a6d409159
Revises: 357851019236
Create Date: 2025-08-20 16:16:34.917212

"""

from collections.abc import Sequence

from alembic import op
from sqlalchemy.dialects import postgresql

import opendlp.adapters.orm

# revision identifiers, used by Alembic.
revision: str = "3b1a6d409159"
down_revision: str | Sequence[str] | None = "357851019236"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "assemblies",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=opendlp.adapters.orm.TZAwareDatetime(timezone=True),
        existing_nullable=False,
    )
    op.alter_column(
        "assemblies",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=opendlp.adapters.orm.TZAwareDatetime(timezone=True),
        existing_nullable=False,
    )
    op.create_index(op.f("ix_assemblies_created_at"), "assemblies", ["created_at"], unique=False)
    op.create_index(op.f("ix_assemblies_status"), "assemblies", ["status"], unique=False)
    op.alter_column(
        "user_assembly_roles",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=opendlp.adapters.orm.TZAwareDatetime(timezone=True),
        existing_nullable=False,
    )
    op.create_index(op.f("ix_user_assembly_roles_assembly_id"), "user_assembly_roles", ["assembly_id"], unique=False)
    op.create_index(
        "ix_user_assembly_roles_user_assembly", "user_assembly_roles", ["user_id", "assembly_id"], unique=False
    )
    op.create_index(op.f("ix_user_assembly_roles_user_id"), "user_assembly_roles", ["user_id"], unique=False)
    op.alter_column(
        "user_invites",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=opendlp.adapters.orm.TZAwareDatetime(timezone=True),
        existing_nullable=False,
    )
    op.alter_column(
        "user_invites",
        "expires_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=opendlp.adapters.orm.TZAwareDatetime(timezone=True),
        existing_nullable=False,
    )
    op.alter_column(
        "user_invites",
        "used_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=opendlp.adapters.orm.TZAwareDatetime(timezone=True),
        existing_nullable=True,
    )
    op.drop_constraint(op.f("user_invites_code_key"), "user_invites", type_="unique")
    op.create_index(op.f("ix_user_invites_code"), "user_invites", ["code"], unique=True)
    op.create_index(op.f("ix_user_invites_created_by"), "user_invites", ["created_by"], unique=False)
    op.create_index(op.f("ix_user_invites_expires_at"), "user_invites", ["expires_at"], unique=False)
    op.create_index(op.f("ix_user_invites_used_by"), "user_invites", ["used_by"], unique=False)
    op.alter_column(
        "users",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=opendlp.adapters.orm.TZAwareDatetime(timezone=True),
        existing_nullable=False,
    )
    op.drop_constraint(op.f("users_email_key"), "users", type_="unique")
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)
    op.create_index("ix_users_oauth_provider_id", "users", ["oauth_provider", "oauth_id"], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("ix_users_oauth_provider_id", table_name="users")
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.create_unique_constraint(op.f("users_email_key"), "users", ["email"], postgresql_nulls_not_distinct=False)
    op.alter_column(
        "users",
        "created_at",
        existing_type=opendlp.adapters.orm.TZAwareDatetime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
    )
    op.drop_index(op.f("ix_user_invites_used_by"), table_name="user_invites")
    op.drop_index(op.f("ix_user_invites_expires_at"), table_name="user_invites")
    op.drop_index(op.f("ix_user_invites_created_by"), table_name="user_invites")
    op.drop_index(op.f("ix_user_invites_code"), table_name="user_invites")
    op.create_unique_constraint(
        op.f("user_invites_code_key"), "user_invites", ["code"], postgresql_nulls_not_distinct=False
    )
    op.alter_column(
        "user_invites",
        "used_at",
        existing_type=opendlp.adapters.orm.TZAwareDatetime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=True,
    )
    op.alter_column(
        "user_invites",
        "expires_at",
        existing_type=opendlp.adapters.orm.TZAwareDatetime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
    )
    op.alter_column(
        "user_invites",
        "created_at",
        existing_type=opendlp.adapters.orm.TZAwareDatetime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
    )
    op.drop_index(op.f("ix_user_assembly_roles_user_id"), table_name="user_assembly_roles")
    op.drop_index("ix_user_assembly_roles_user_assembly", table_name="user_assembly_roles")
    op.drop_index(op.f("ix_user_assembly_roles_assembly_id"), table_name="user_assembly_roles")
    op.alter_column(
        "user_assembly_roles",
        "created_at",
        existing_type=opendlp.adapters.orm.TZAwareDatetime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
    )
    op.drop_index(op.f("ix_assemblies_status"), table_name="assemblies")
    op.drop_index(op.f("ix_assemblies_created_at"), table_name="assemblies")
    op.alter_column(
        "assemblies",
        "updated_at",
        existing_type=opendlp.adapters.orm.TZAwareDatetime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
    )
    op.alter_column(
        "assemblies",
        "created_at",
        existing_type=opendlp.adapters.orm.TZAwareDatetime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
    )
    # ### end Alembic commands ###
