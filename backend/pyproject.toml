[project]
name = "OpenDLP"
version = "0.1.0"
description = "Open Democratic Lottery Platform"
readme = "README.md"
requires-python = ">=3.12,<3.13"
dependencies = [
  "alembic>=1.16.4",
  "cachelib>=0.13.0",
  "click>=8.2.1",
  "django>=5.2.5",
  "flask>=3.1.1",
  "flask-babel>=4.0.0",
  "flask-login>=0.6.3",
  "flask-session>=0.8.0",
  "flask-talisman>=1.1.0",
  "flask-wtf>=1.2.2",
  "markdown>=3.8.2",
  "markupsafe>=3.0.2",
  "python-dotenv>=1.1.1",
  "redis>=6.4.0",
  "sqlalchemy[postgresql-psycopg2binary]>=2.0.43",
  "werkzeug>=3.1.3",
  "whitenoise>=6.9.0",
  "wtforms>=3.2.1",
]

[project.scripts]
opendlp = "opendlp.entrypoints.cli:cli"

[project.optional-dependencies]
production = ["gunicorn>=23.0.0"]

[build-system]
requires = ["uv_build>=0.8.13,<0.9.0"]
build-backend = "uv_build"

[dependency-groups]
dev = [
  "covdefaults>=2.3.0",
  "deptry>=0.23.1",
  "mypy>=1.17.1",
  "playwright>=1.54.0",
  "pre-commit>=4.3.0",
  "pytest>=8.4.1",
  "pytest-bdd>=8.1.0",
  "pytest-cov>=6.2.1",
  "pytest-playwright>=0.7.0",
  "tenacity>=9.1.2",
  "types-markdown>=3.8.0.20250809",
  "types-wtforms>=3.2.1.20250809",
]

[tool.mypy]
files = ["src"]
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
warn_unused_ignores = true
show_error_codes = true
ignore_missing_imports = false
plugins = ["sqlalchemy.ext.mypy.plugin"]

[[tool.mypy.overrides]]
module = 'pytest.*'
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = 'django.*'
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = 'flask_babel.*'
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = 'flask_login.*'
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = 'flask_session.*'
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = 'flask_talisman.*'
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = 'flask_wtf.*'
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = 'whitenoise.*'
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.ruff]
target-version = "py312"
line-length = 120
fix = true

[tool.ruff.lint]
select = [
  # flake8-2020
  "YTT",
  # flake8-bandit
  "S",
  # flake8-bugbear
  "B",
  # flake8-builtins
  "A",
  # flake8-comprehensions
  "C4",
  # flake8-debugger
  "T10",
  # flake8-simplify
  "SIM",
  # isort
  "I",
  # mccabe
  "C90",
  # pycodestyle
  "E",
  "W",
  # pyflakes
  "F",
  # pygrep-hooks
  "PGH",
  # pyupgrade
  "UP",
  # ruff
  "RUF",
  # tryceratops
  # TODO: re-enable later
  # "TRY",
]
ignore = [
  # UnnecessaryCollectionCall - but using dict(a=x, b=y) can be nicer
  "C408",
  # LineTooLong
  "E501",
  # use assert in non-test code
  "S101",
  # partial path in subprocess - "uv" rather than "/usr/bin/uv"
  "S607",
  # DoNotAssignLambda
  "E731",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]

[tool.ruff.lint.extend-per-file-ignores]
"**/tests/**/*.py" = [
  # at least these should be fine in tests:
  "S105", # hardcoded passwords
  "S106", # hardcoded passwords
  "ARG",  # Unused function args -> fixtures nevertheless are functionally relevant...
  "FBT",  # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
  # The below are debateable
  "PLR2004", # Magic value used in comparison, ...
  "S311",    # Standard pseudo-random generators are not suitable for cryptographic purposes
]
"**/tests/*" = [
  # at least these should be fine in tests:
  "S105", # hardcoded passwords
  "S106", # hardcoded passwords
  "ARG",  # Unused function args -> fixtures nevertheless are functionally relevant...
  "FBT",  # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
  # The below are debateable
  "PLR2004", # Magic value used in comparison, ...
  "S311",    # Standard pseudo-random generators are not suitable for cryptographic purposes
]

[tool.ruff.lint.isort]
force-single-line = false
known-first-party = ["opendlp", "src", "tests"]

[tool.ruff.format]
preview = true

[tool.coverage.run]
source = ["src", "tests"]
plugins = ["covdefaults"]
omit = ["tests/bdd/*"]

[tool.coverage.report]
skip_empty = true
fail_under = 90

[tool.deptry.per_rule_ignores]
# these are not imported directly, but are used.
# - alembic - sqlalchemy migration - might be used directly in cli when we write it
DEP002 = ["alembic", "gunicorn"]
