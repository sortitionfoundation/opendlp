# Note if the command starts with `@` then it will NOT be echoed to the terminal

set dotenv-load

# Test the code with pytest (HTML report)
default: test-nobdd

# Test the code with pytest (HTML report)
test-html:
	@echo "ðŸš€ Testing code: Running pytest"
	uv run python -m pytest --tb=short --cov --cov-config=pyproject.toml --cov-report=html

# Test the code with pytest (XML report)
test-xml:
	@echo "ðŸš€ Testing code: Running pytest"
	uv run python -m pytest --tb=short --cov --cov-config=pyproject.toml --cov-report=xml

# Test the code with pytest (HTML report)
test: test-html

test-nobdd:
	@echo "ðŸš€ Testing code: Running pytest"
	uv run python -m pytest --tb=short --ignore=tests/bdd --cov --cov-config=pyproject.toml --cov-report=html

# Run BDD tests with pytest-bdd and Playwright
test-bdd:
	@echo "ðŸš€ Running BDD tests"
	uv run python -m pytest tests/bdd/ -v --tb=short

# Run BDD tests in headless mode (for CI)
test-bdd-headless:
	@echo "ðŸš€ Running BDD tests (headless)"
	@CI=true uv run python -m pytest tests/bdd/ -v --tracing=retain-on-failure

# run the tests when an files change
watch-tests:
	ls *.py | entr uv run pytest --tb=short

# Install the virtual environment, dependencies, an editable copy of this install and install the pre-commit hooks
install:
	@echo "ðŸš€ Creating virtual environment using uv"
	@uv sync
	@echo "ðŸš€ Setting up pre-commit hooks"
	@uv run pre-commit install
	@echo "ðŸš€ Install node dependencies & build sass into css"
	@npm install
	@npm run build:sass
	@echo "ðŸš€ Compile translations"
	@uv run pybabel compile -d translations

install-dev: install
	@echo "ðŸš€ Installing development dependencies"
	@uv run playwright install

# Run code quality tools.
check:
	@echo "ðŸš€ Checking lock file consistency with 'pyproject.toml'"
	@uv lock --locked
	@echo "ðŸš€ Linting code: Running pre-commit"
	@uv run pre-commit run --all-files
	@echo "ðŸš€ Static type checking: Running mypy"
	@uv run mypy
	@echo "ðŸš€ Checking for obsolete dependencies: Running deptry"
	@uv run deptry src

# Run code quality tools - CI edition
check-ci:
	@echo "ðŸš€ Checking lock file consistency with 'pyproject.toml'"
	@uv lock --locked
	@echo "ðŸš€ Linting code: Running pre-commit"
	@uv run pre-commit run --all-files --config .pre-commit-config-ci.yaml
	@echo "ðŸš€ Static type checking: Running mypy"
	@uv run mypy
	@echo "ðŸš€ Checking for obsolete dependencies: Running deptry"
	@uv run deptry src

# start the flask shell
flask-shell:
  @uv run flask shell

# start the flask shell
flsh: flask-shell

# run flask locally
flask $FLASK_APP="src/opendlp/entrypoints/flask_app.py":
  @uv run flask run --debug

# run flask for BDD tests - they will use this server if it exists
flask-bdd $FLASK_APP="src/opendlp/entrypoints/flask_app.py" $DB_PORT="54322" $FLASK_ENV="testing_postgres":
  @uv run flask run --port=5002 --host=127.0.0.1 --debug

# run gunicorn locally
gunicorn:
  @uv run gunicorn --bind=0.0.0.0:8080 --log-level=debug 'opendlp.entrypoints.flask_app:create_app()'

# build CSS from SCSS
build-css:
  @echo "ðŸš€ Building CSS from SCSS"
  @npm run build:sass

# watch and rebuild CSS from SCSS
watch-css:
  @echo "ðŸš€ Watching and building CSS from SCSS"
  @npm run watch:sass

# run flask locally
run: build-css flask

# connect to docker postgres (local services)
psql:
  @echo "password is abc123"
  psql --host 127.0.0.1 --port 54321 --user opendlp opendlp

# connect to docker postgres (tests)
psql-test:
  @echo "password is abc123"
  psql --host 127.0.0.1 --port 54322 --user opendlp opendlp

# run the database migrations
migrate:
  uv run alembic upgrade head

# extract strings to translate from code and templates
translate-regen:
  uv run pybabel extract -F babel.cfg -k _l -o translations/messages.pot .
  uv run pybabel update -i translations/messages.pot -d translations

# compile translations from .po files so flask can use them
translate-compile:
  uv run pybabel compile -d translations

# shut down docker
stop-docker:
	@docker compose down

# rebuild docker image
build-docker:
	@docker compose build

# start docker and detach - note NO WATCH
start-docker:
	@docker compose up -d

# start docker watching for changes and blocking - i.e. not detaching
start-docker-b:
	@docker compose up --watch

# stop, rebuild, start docker and detach
restart-docker: stop-docker build-docker start-docker

# stop, rebuild, start docker blocking - i.e. not detaching
restart-docker-b: stop-docker build-docker start-docker-b

# start the postgres only docker composer for services for local dev
start-local-docker:
  @docker compose -f compose.localdev.yaml up -d

# stop the postgres only docker composer for services for local dev
stop-local-docker:
  @docker compose -f compose.localdev.yaml down

# start the postgres only docker composer for services for tests
start-test-docker:
  @docker compose -f compose.test.yaml up -d

# stop the postgres only docker composer for services for tests
stop-test-docker:
  @docker compose -f compose.test.yaml down

# drop the docker volume holding the postgres database for local services
drop-local-docker-db:
  @docker volume rm backend_sqla_opendlp_local_pgdata

# drop the docker volume holding the postgres database for test
drop-test-docker-db:
  @docker volume rm backend_sqla_opendlp_test_pgdata

# update the deployment on opendlp-test server from git main branch
deploy-opendlp-test:
  @ssh opendlp-test just opendlp-update

# run the editor with the environment available
edit:
  @uv run $EDITOR

# run the editor with the environment available
e: edit
# run the editor with the environment available
vim: edit
