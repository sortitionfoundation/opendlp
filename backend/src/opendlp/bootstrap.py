import tempfile
from pathlib import Path

from sortition_algorithms import adapters
from sqlalchemy.orm import sessionmaker

from opendlp import config
from opendlp.adapters import database
from opendlp.adapters.email import ConsoleEmailAdapter, EmailAdapter, SMTPEmailAdapter
from opendlp.adapters.sortition_algorithms import CSVGSheetDataSource
from opendlp.config import SMTPEmailCfg, get_config, get_db_uri
from opendlp.service_layer import unit_of_work


def bootstrap_session_factory(
    start_orm: bool = True,
    session_factory: sessionmaker | None = None,
) -> sessionmaker:
    if start_orm:
        database.start_mappers()

    if session_factory is None:
        session_factory = database.create_session_factory(get_db_uri())

    return session_factory


def bootstrap(
    start_orm: bool = True,
    uow: unit_of_work.AbstractUnitOfWork | None = None,
    session_factory: sessionmaker | None = None,
) -> unit_of_work.AbstractUnitOfWork:
    session_factory = bootstrap_session_factory(start_orm, session_factory)

    if uow is None:
        uow = unit_of_work.SqlAlchemyUnitOfWork(session_factory)

    return uow


def update_data_source_from_assembly_gsheet(
    gsheet_data_source: adapters.GSheetDataSource,
) -> adapters.GSheetDataSource | CSVGSheetDataSource:
    """
    Override the datasource if environment variables indicate we are testing.

    In production: returns the DataSource object passed in.
    In tests (when USE_CSV_DATA_SOURCE=true): returns CSVFileDataSource instead.

    Args:
        gsheet_data_source: the GSheetDataSource object generated by the normal code.

    Returns:
        AbstractDataSource instance (either GSheetDataSource passed in or CSVFileDataSource)
    """
    if not config.use_csv_data_source_for_testing():
        return gsheet_data_source
    test_dir = config.get_test_csv_data_dir()
    # Create temp directory for output files (selected/remaining)
    temp_output_dir = Path(tempfile.gettempdir()) / "opendlp_selection_output"
    temp_output_dir.mkdir(exist_ok=True)

    csv_data_source = adapters.CSVFileDataSource(
        features_file=test_dir / "features.csv",
        people_file=test_dir / "candidates.csv",
        selected_file=temp_output_dir / "selected.csv",
        remaining_file=temp_output_dir / "remaining.csv",
    )
    return CSVGSheetDataSource(csv_data_source=csv_data_source, gsheet_data_source=gsheet_data_source)


def get_email_adapter() -> EmailAdapter:
    """Get the configured email adapter based on application configuration.

    Returns:
        EmailAdapter instance (ConsoleEmailAdapter or SMTPEmailAdapter)

    Raises:
        ValueError: If email adapter type is unknown
    """
    app_config = get_config()
    adapter_type = app_config.EMAIL_ADAPTER.lower().strip()

    if adapter_type == "console":
        return ConsoleEmailAdapter()

    if adapter_type == "smtp":
        smtp_config = SMTPEmailCfg.from_env()
        return SMTPEmailAdapter(
            host=smtp_config.host,
            port=smtp_config.port,
            username=smtp_config.username,
            password=smtp_config.password,
            use_tls=smtp_config.use_tls,
            default_from_email=smtp_config.from_email,
            default_from_name=smtp_config.from_name,
        )

    raise ValueError(f"Unknown email adapter type: '{adapter_type}'. Valid options are: 'console', 'smtp'")
